<?php
/**
 * Code Samples.
 *
 * @author Krzysztof Kardasz <krzysztof@kardasz.eu>
 * @license MIT
 */
namespace Kardasz\DTO;

/**
 * Class ApiProblem.
 *
 * @see https://tools.ietf.org/html/draft-nottingham-http-problem-07
 * @see https://tools.ietf.org/html/rfc7807
 */
class ApiProblem implements \JsonSerializable
{
    /**
     * An absolute URI [RFC3986] that identifies the problem type.
     * When dereferenced, it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML W3C.REC-html401-19991224]).
     * When this member is not present, its value is assumed to be "about:blank".
     *
     * @var string
     */
    private $type = 'about:blank';

    /**
     * A short, human-readable summary of the problem type.
     * It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localisation.
     *
     * @var string
     */
    private $title;

    /**
     * The HTTP status code ([RFC2616], Section 6) generated by the origin server for this occurrence of the problem.
     *
     * @var int
     */
    private $status = 422;

    /**
     * An human readable explanation specific to this occurrence of the problem.
     *
     * @var string
     */
    private $detail;

    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     *
     * @var string
     */
    private $instance;

    /**
     * List errors.
     *
     * @var array
     */
    private $errors = [];

    /**
     * Additional data.
     *
     * @var array
     */
    private $extraData = [];

    /**
     * ApiProblem constructor.
     *
     * @param array $data
     */
    public function __construct(array $data = [])
    {
        foreach ($data as $k => $v) {
            switch ($k) {
                case 'type':
                    $this->setType($v);
                    break;
                case 'title':
                    $this->setTitle($v);
                    break;
                case 'status':
                    $this->setStatus($v);
                    break;
                case 'detail':
                    $this->setDetail($v);
                    break;
                case 'instance':
                    $this->setInstance($v);
                    break;
                case 'errors':
                    $this->setErrors($v);
                    break;
                default:
                    $this->extraData[$k] = $v;
            }
        }
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @param string $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * @param int $status
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }

    /**
     * @return string
     */
    public function getDetail()
    {
        return $this->detail;
    }

    /**
     * @param string $detail
     */
    public function setDetail($detail)
    {
        $this->detail = $detail;
    }

    /**
     * @return string
     */
    public function getInstance()
    {
        return $this->instance;
    }

    /**
     * @param string $instance
     */
    public function setInstance($instance)
    {
        $this->instance = $instance;
    }

    /**
     * @return array
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * @param array $errors
     */
    public function setErrors(array $errors)
    {
        $this->errors = $errors;
    }

    /**
     * @return array
     */
    public function getExtraData()
    {
        return $this->extraData;
    }

    /**
     * @param array $extraData
     */
    public function setExtraData(array $extraData)
    {
        $this->extraData = $extraData;
    }

    /**
     * @return array
     */
    public function jsonSerialize()
    {
        $base = [
            'type' => $this->getType(),
            'title' => $this->getTitle(),
            'detail' => $this->getDetail(),
            'instance' => $this->getInstance(),
            'errors' => $this->getErrors(),
        ];

        return array_merge($base, $this->getExtraData());
    }
}
